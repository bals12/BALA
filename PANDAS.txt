                   ############## IMPORTING TABLES AS DATA FRAME FROM RDBMS ####################

import pandas as pd
import cx_Oracle

## ESTABLISHING CONNECTION

con = cx_Oracle.connect('team13_bala/team13_bala@orcl-aws.c8sefhobaih4.ap-south-1.rds.amazonaws.com:1521/ORCL')
---------------------------------------------------------------------------------------------------------------
## TO READ TABLE FROM RDBMS

loan_customer=pd.read_sql("SELECT * FROM LOAN_CUSTOMER",con)
NOTE: TABLE WILL IMPORT AS DATA FRAME 
---------------------------------------------------------------------------------------------------------------
## TO READ TABLE FROM CSV FILE FROM LOCAL

weather = pd.read_csv(r"D:\data engineer course  IBRIDGE\PANDAS\CSV FILE\weather_data1.csv")
NOTE: MISSING VALUES IN THIS FILE WILL BE DISPLAY AS 'NaN'

---------------------------------------------------------------------------------------------------------------
## TO READ TABLE FROM EXCEL FILE FROM LOCAL

CREDIT_CARD = pd.read_excel(r"D:\data engineer course  IBRIDGE\PANDAS\hands on\EXCEL FILE\CREDIT_CARD.xlsx")
NOTE: MISSING VALUES IN THIS FILE WILL BE DISPLAY AS 'NaN'

----------------------------------------------------------------------------------------------------------------

## QUERIES IN PANDAS

DISPLAY NAME OF CUSTOMER WHOSE BELONG TO 'ERODE'

CREDIT_CARD['CUST_F_NM'][CREDIT_CARD['CUST_CITY']=='ERODE']

DISPLAY CUSTOMER PHONE NUMBER
loan_customer['CUST_PHONE'][loan_customer['CUST_F_NM']=='RAHUL']

------------------------------------------------------------------------------------------------------------

############  MISSING DATA HANDLING IN PANDAS  ############

COMMANDS USING ARE 

> fillna
> interpolate
> dropna

## import csv file

weather = pd.read_csv(r"D:\data engineer course  IBRIDGE\PANDAS\CSV FILE\weather_data.csv")

Bellow data frame will be imported

           day	    temperature	  windspeed	event
0	01-01-2017	32.0	    6.0	         Rain
1	01-04-2017	NaN	    9.0	         Sunny
2	01-05-2017	28.0	    NaN	         Snow
3	01-06-2017	NaN	    7.0	         NaN
4	01-07-2017	32.0	    NaN	         Rain
5	01-08-2017	NaN	    NaN	         Sunny
6	01-09-2017	NaN	    NaN	         NaN
7	01-10-2017	34.0	    8.0	         Cloudy
8	01-11-2017	40.0	   12.0	         Sunny



## to change format of date using parse_dates

weather = pd.read_csv(r"D:\data engineer course  IBRIDGE\PANDAS\CSV FILE\weather_data.csv",parse_dates=['day'])


## TO FIND VALUES IN DATA FRAME USING INDEX

weather['event'][7]

## TO FIND MEAN VALUE OF DATA FRAME

weather.mean()


## select day from weather_data where temperature = (select max(temperature) from weather_data)


weather['day'][weather['temperature']==weather['temperature'].max()]


## TO DISPLAY PARTICULAR COLUMN(Series) of Data Frame

weather['temperature']

## TO REMOVE INDEX FROM DATA FRAME AND SET DAY AS KEY THEN USE INPLACE FUNCTION

weather.set_index(keys='day',inplace=True)

## TO ACCESS DATA FRAME THROUGH ROW WISE

weather.loc['01-01-2017']

## TO FIND TEMPERATURE ON 01-01-2017
weather['temperature']['01-01-2017']

## TO COUNT THE TOTAL DATA PRESENT IN EACH ATTRIBUTES
weather.count()

## TO FILL NaN with specific value as 'NO VALUE'
weather.fillna('NO VALUE')

## TO FIND TOTAL COUNT OF NULL VALUES PRESENT IN THIS DATA FRAME
weather.isnull().sum()

## BY USING fillna() TO FILL ALL NaN AS 0
weather.fillna(0)

## TO FILL THE ALL NaN VALUES BY USING DICTIONARY
weather.fillna({'temperature':23, 'windspeed':5,'event':'no event recorded'})

## USING METHODS OF ffill TO FILL THE NaN VALUES
fw = weather.fillna(method='ffill')

## USING METHODS OF bfill TO FILL THE NaN VALUES
bw = weather.fillna(method='bfill')

## USING LIMIT IN fillna method
fw1= weather.fillna(method='ffill',limit=1)
bw1=weather.fillna(method='bfill',limit=1)

## USING interpolate() METHOD TO FIND MISSING VALUES
w=weather.interpolate()



#################  MERGE OF DATA FRAME ###################

## MERGING OF DATAFRAME
FOR INNER JOIN
pd.merge(df1,df2,on='city')

FOR OUTER JOIN
df3 = pd.merge(df1, df2, on="city",how='outer')

USING INDICATOR FLAG TO DETERMINE TYPE OF JOIN
df3=pd.merge(df1,df2,on="city",how="outer",indicator=True)

USING SUFFIXES 
df3= pd.merge(df1,df2,on="city",how="outer", suffixes=('_2020','_2021'))

NOTE:
IN PANDAS JOIN WORKS ON INDEX ONLY
BUT MERGE WORKS ON COLUMN, SO MOSTLY MERGE IS USING



###################### CONCATINATION ##############################

## TO CONCAT OF TWO DATAFRAME OF df1,df2

df3=pd.concat([df1,df2],ignore_index=True)

## USING KEY IN CONCATINATION OF DATA FRAME df1,df2
df4=pd.concat([df1,df2],keys=['south','north'])

## CONCATINATE DATA FRAME WITH SERIES
df5=pd.concat([df1,s],axis=1)


########################GROUP BY ###################################

## USING GROUP BY IN THE DATA FRAME

g=df.groupby('school_code')
print(df.groupby('school_code').agg({'age':['mean','min','max']}))

## TO DISPLAY PARTICULAR GROUP IN DATA FRAME

g.get_group('s001')

## TO MAKE LIST OF VALUES IN DATA FRAMES BY USING GROUP BY.

g=df.groupby(['school_code'])
temp=list(g)

##TO DISPLAY NUMBER OF VALUES PRESENT

g2=df.groupby(['school_code','class'])
g2.size()

## SPLIT DATASET GROUP BY ONE COLUMN OF MEAN, MIN, MAX

df2.groupby('customer_id').agg({'purch_amt':['mean','min','max','sum']})

## TO DISPLAY PURCHASE AMOUNT AS YEAR AND MONTH WISE AS CONSOLIDATED

df2.group by([df2['ord_date'].dt.year,df2['ord_date'].dt.month]).agg({'purch_amt':sum}))

RESULT:

                   purch_amt
ord_date ord_date           
2012     4           3045.60
         5            215.76
         6            250.45
         7           2475.89
         8            110.50
         9            270.65
         10         11172.33

----------------------------------------------------------------------------------------------------------------





























